==============================================
SafeFall Backend 파일 설명서
==============================================

[루트 디렉토리]

app.py =>
Flask 애플리케이션 메인 진입점
- Flask 앱 팩토리 패턴 구현
- 데이터베이스, CORS, JWT 확장 초기화
- API 블루프린트 등록 (auth, streaming, incidents, notifications)
- 에러 핸들러 등록 (404, 500, 400)
- 헬스체크 엔드포인트 (/health)
- 개발/운영 환경 분리 설정
- 서버 시작 시 0.0.0.0:5000 바인딩

config.py =>
Flask 애플리케이션 설정 파일
- 환경별 설정 클래스 (Development, Production)
- 데이터베이스 연결 설정 (SQLite)
- JWT 토큰 만료 시간 설정 (액세스 1시간, 리프레시 30일)
- 파일 저장 경로 설정 (videos, HLS)
- 스트리밍 설정 (FPS, 해상도, 버퍼 시간)
- CORS 허용 도메인 설정
- 데이터베이스 커넥션 풀 최적화 설정
- 운영 환경 보안 검증 (시크릿 키 필수 설정)

models.py =>
SQLAlchemy 데이터베이스 모델 정의
- User: 사용자 모델 (username, email, password_hash, is_active)
- Incident: 사고 기록 모델 (incident_type, video_path, thumbnail_path, is_checked, confidence)
- StreamSession: 스트리밍 세션 모델 (device_id, total_frames, incidents_detected)
- 비밀번호 해싱 (werkzeug.security)
- 복합 인덱스 설정 (성능 최적화)
- 타임존 aware datetime 사용 (UTC)
- 프론트엔드 호환성을 위한 필드 별칭 (filename, createdAt, isChecked)

requirements.txt =>
Python 패키지 의존성 목록
- Flask 3.0.0 (웹 프레임워크)
- Flask-CORS 4.0.0 (CORS 처리)
- Flask-SQLAlchemy 3.1.1 (ORM)
- Flask-JWT-Extended 4.6.0 (JWT 인증)
- opencv-python 4.9.0.80 (영상 처리)
- numpy 1.26.4 (수치 연산)
- bcrypt 4.1.2 (비밀번호 해싱)
- gevent 24.2.1 (비동기 지원)
- SQLAlchemy 2.0.25 (데이터베이스 ORM)

.env =>
환경 변수 설정 파일
- SECRET_KEY, JWT_SECRET_KEY (보안 키)
- DATABASE_URI (데이터베이스 경로)
- CORS_ORIGINS (허용 도메인)
- DEBUG 모드 설정
- 기타 환경별 설정값

test_backend.sh =>
백엔드 API 테스트 스크립트
- 회원가입, 로그인 API 테스트
- 사고 보고, 목록 조회 API 테스트
- 스트리밍 세션 API 테스트
- JWT 토큰 검증 테스트
- curl 명령어 기반 자동화 테스트

safefall.db =>
SQLite 데이터베이스 파일
- 사용자, 사고 기록, 스트림 세션 데이터 저장
- 개발 환경에서 사용
- 운영 환경에서는 PostgreSQL 등으로 교체 권장


[api/ 디렉토리]

api/__init__.py =>
API 패키지 초기화 파일
- 블루프린트 모듈 import 지원
- 패키지 구조 정의

api/auth.py =>
사용자 인증 API 블루프린트
- POST /api/auth/register: 회원가입
- POST /api/auth/login: 로그인 (JWT 토큰 발급)
- POST /api/auth/refresh: 액세스 토큰 갱신
- GET /api/auth/me: 현재 사용자 정보 조회
- POST /api/auth/logout: 로그아웃
- 비밀번호 해싱 및 검증
- JWT 토큰 생성 (access_token, refresh_token)
- 중복 가입 방지

api/incidents.py =>
사고 기록 관리 API 블루프린트
- POST /api/incidents/report: IoT 디바이스로부터 사고 신호 수신 및 영상 저장
- GET /api/incidents/list: 사고 목록 조회 (페이지네이션, 필터링)
- GET /api/incidents/<id>: 사고 상세 조회
- GET /api/incidents/<id>/video: 사고 영상 다운로드
- GET /api/incidents/<id>/thumbnail: 썸네일 이미지 조회
- PATCH /api/incidents/<id>/check: 사고 확인 처리
- DELETE /api/incidents/<id>: 사고 삭제 (영상 파일 포함)
- GET /api/incidents/stats: 통계 조회 (총 개수, 확인/미확인, 오늘 발생 수)
- 버퍼에서 사고 전후 15초 영상 추출
- 썸네일 자동 생성
- 경로 탐색 공격 방지 (safe_path_join)
- 파일 삭제 시 트랜잭션 롤백 및 정리
- 허용된 incident_type 검증 (fall, collapse, abnormal_behavior, emergency, unknown)

api/streaming.py =>
실시간 스트리밍 API 블루프린트
- POST /api/stream/upload: 라즈베리파이로부터 프레임 수신
- GET /api/stream/mjpeg: MJPEG 스트리밍 엔드포인트
- GET /api/stream/hls/playlist.m3u8: HLS 플레이리스트
- POST /api/stream/session/start: 스트리밍 세션 시작
- POST /api/stream/session/stop: 스트리밍 세션 종료
- GET /api/stream/session/status: 현재 세션 상태
- GET /api/stream/buffer/status: 버퍼 상태 확인
- CircularVideoBuffer를 사용한 프레임 버퍼링
- 최신 프레임 MJPEG 스트리밍
- HLS 세그먼트 관리
- 멀티스레드 안전성 (threading.Lock)

api/notifications.py =>
알림 API 블루프린트
- GET /api/v1/notifications/latest: 최근 미확인 사고 알림 조회
- 시간 범위 필터링 (기본 24시간, 최대 1주일)
- 알림 심각도 분류 (high, medium, low)
- incident_type별 알림 타이틀 및 메시지 생성
- 신뢰도 퍼센트 표시
- 인증 없이 접근 가능 (IoT 디바이스 호환)


[utils/ 디렉토리]

utils/__init__.py =>
유틸리티 패키지 초기화 파일
- buffer, video 모듈 import 지원

utils/buffer.py =>
순환 버퍼 및 HLS 관리 유틸리티
- CircularVideoBuffer: 사고 발생 전 15~30초 영상을 메모리에 보관
  * add_frame(): 프레임 추가
  * get_frames_before(): 특정 시각 이전의 프레임 반환
  * get_all_frames(): 모든 프레임 반환
  * clear(): 버퍼 초기화
  * get_status(): 버퍼 상태 (frame_count, duration_seconds, usage_percent)
- HLSSegmentManager: HLS 스트리밍 세그먼트 관리
  * add_segment(): 세그먼트 추가
  * get_playlist(): M3U8 플레이리스트 생성
  * clear(): 세그먼트 초기화
- 멀티스레드 안전성 (threading.Lock)
- deque를 사용한 효율적인 순환 버퍼

utils/video.py =>
영상 처리 유틸리티
- frames_to_video(): 프레임 리스트를 MP4 비디오로 저장
  * FPS 자동 계산 (타임스탬프 기반)
  * Windows/Linux 코덱 호환성 (mp4v/avc1)
  * JPEG 바이트 디코딩 지원
- create_thumbnail(): 비디오에서 썸네일 생성
  * 중간 프레임 추출
  * 640x360 리사이징
  * JPEG 품질 90%
- get_video_info(): 비디오 정보 추출
  * FPS, 프레임 수, 해상도, 재생 시간
  * 파일 크기 (MB 단위)
- convert_to_hls(): 비디오를 HLS 형식으로 변환 (ffmpeg)
- cleanup_old_files(): 오래된 파일 정리 (24시간 기준)
- OpenCV 기반 비디오 처리


[디렉토리 구조]

static/ =>
정적 파일 저장 디렉토리
- HLS 세그먼트 파일 저장 (static/hls/)

videos/ =>
사고 영상 및 썸네일 저장 디렉토리
- incident_*.mp4 (사고 영상)
- thumb_*.jpg (썸네일 이미지)

instance/ =>
Flask 인스턴스 폴더
- 데이터베이스 파일 및 인스턴스별 설정

venv/ =>
Python 가상 환경 디렉토리
- 격리된 패키지 환경

__pycache__/ =>
Python 바이트코드 캐시 디렉토리
- 컴파일된 .pyc 파일


[주요 기능]

1. 사용자 인증
   - JWT 기반 토큰 인증
   - 비밀번호 해싱 (bcrypt)
   - 액세스/리프레시 토큰 분리

2. 사고 감지 및 저장
   - IoT 디바이스로부터 실시간 사고 신호 수신
   - 사고 전후 15초 영상 자동 저장
   - 썸네일 자동 생성
   - 사고 유형별 분류 (fall, collapse, etc.)

3. 실시간 스트리밍
   - MJPEG 스트리밍 지원
   - HLS 스트리밍 지원
   - 순환 버퍼를 통한 메모리 효율적 프레임 관리

4. 알림 시스템
   - 미확인 사고 알림 조회
   - 심각도별 분류 (high, medium, low)
   - 시간 범위 필터링

5. 보안
   - JWT 토큰 기반 인증
   - 경로 탐색 공격 방지
   - CORS 설정
   - 운영 환경 시크릿 키 검증
   - 파일 접근 권한 검증

6. 성능 최적화
   - 데이터베이스 복합 인덱스
   - 커넥션 풀 설정
   - 단일 집계 쿼리로 통계 조회
   - 멀티스레드 안전성

==============================================
